JavaScript Functions

1. What are Functions in js? what are the typs of Function?

    Function is a block of code which perform a specific task
    and perform some operation.

    Types:
        Named Function
        anonymous function
        function expression
        Arrow Function
        IIFE
        callback Function
        Higher-order Function


2. What is the difference between named and anonymous functions? 
    When to use what in applications?

    The functions which do not have name are called anonymous functions.
    anonymous functions can't be referenced directly by the name.
    Usecase: 
        small logics,
        when we want to use a function in single place.
    ex:
        console.log(function(a,b){
            return a * b;
        }(4,5));
         // output: 20.


3. what is the function expression in Js?
    A function expression is a way to define a function by assigning
    it to a variable.

    // anonymous function expression.
    const add = function(a,b) {
        return a + b;
    };
    console.log(add(5,6)); // output: 11.
    
    //Named function expression
    const add = function sum(a,b){
        return a + b;
    }
    console.log(add(5,3)); // output: 8.

4. What are Arrow functions in Js? What is it use?

    Arrow functions, also known as fat arrow functions,
    is a simpler and shorter way for defining functions in JavaScript.

    () => {}.

    () - parameters list
    {} - function body.

    // traditional approach
    function add(x,y)
    {
        return x + y;
    }
    console.log(add(5,6));
    //output: 11.

    // Array function
    const add = (x,y) => x + y;
    console.log(add(5,4));
    //output: 9


5. What are callback Functions in Js? what is the use?

    callback function is a function that is passed as an argument
    to another function.

    ex: 
    function createQuote(quote, callback) {
    const myQuote = "Like I always say, " + quote;
    callback(myQuote);
    }

    function logQuote(quote) {
        console.log(quote);
    }

    createQuote("eat your vegetables!", logQuote);
    // Output: "Like I always say, eat your vegetables!"



    Using Callbacks for Asynchronous Operations:
    Callbacks are commonly used for asynchronous tasks, such as fetching data from a server or reading files.
    Example (using setTimeout to simulate an async operation):
    JavaScript

    function fetchDataFromServer(callback) {
        setTimeout(() => {
            const data = "Data from server";
            callback(data);
        }, 1000); // Simulating a delay of 1 second
    }

    function displayData(data) {
        console.log("Received:", data);
    }

    fetchDataFromServer(displayData);
    // Output (after 1 second): "Received: Data from server"
    

    Handling Events with Callbacks:
    Event listeners often use callback functions to respond to user interactions.
    Example (using an event listener for button click):
    HTML

    <button id="myButton">Click me!</button>
    <script>
        function handleButtonClick() {
            console.log("Button clicked!");
        }

        const buttonElement = document.getElementById("myButton");
        buttonElement.addEventListener("click", handleButtonClick);
    </script>
    AI-generated code. Review and use carefully. More info on FAQ.
    When the button is clicked, the handleButtonClick callback function is executed.



6. What is the difference between arguments and parameters?

    parameters are passed while writing the function.

    arguments are passed while calling the function.

7. In how many ways we can pass arguments to a function?



8. What is higher order function in js?


        Definition of Higher-Order Functions:
        Higher-order functions are functions that either:
        Accept other functions as arguments, or
        Return functions as their results.
        They allow you to treat functions as first-class citizens in JavaScript.
        Benefits of Using Higher-Order Functions:
        Modularity and Reusability: HOFs promote cleaner, more modular code by separating concerns.
        Abstraction: They abstract away repetitive patterns, making code more expressive.
        Functional Programming: HOFs are essential for functional programming paradigms.
        Examples of Higher-Order Functions:
        1. Array.prototype.map():
        Creates a new array by applying a function to each element in the original array.
        Example:
        JavaScript

        const numbers = [1, 2, 3];
        const doubled = numbers.map((num) => num * 2);
        // doubled: [2, 4, 6]
        AI-generated code. Review and use carefully. More info on FAQ.
        2. Array.prototype.filter():
        Creates a new array with elements that pass a given test.
        Example:
        JavaScript

        const scores = [80, 90, 70, 95];
        const passed = scores.filter((score) => score >= 80);
        // passed: [80, 90, 95]
        AI-generated code. Review and use carefully. More info on FAQ.
        3. Array.prototype.reduce():
        Applies a function to reduce an array to a single value (e.g., sum, average).
        Example:
        JavaScript

        const expenses = [100, 50, 80];
        const total = expenses.reduce((acc, expense) => acc + expense, 0);
        // total: 230
        AI-generated code. Review and use carefully. More info on FAQ.
        4. Array.prototype.forEach():
        Executes a function for each element in an array (no new array is created).
        Example:
        JavaScript

        const fruits = ['apple', 'banana', 'cherry'];
        fruits.forEach((fruit) => console.log(fruit));
        // Output: apple, banana, cherry
        AI-generated code. Review and use carefully. More info on FAQ.
        5. Array.prototype.some():
        Checks if at least one element satisfies a condition.
        Example:
        JavaScript

        const numbers = [10, 20, 30];
        const hasEven = numbers.some((num) => num % 2 === 0);
        // hasEven: true
        AI-generated code. Review and use carefully. More info on FAQ.
        6. Array.prototype.every():
        Checks if all elements satisfy a condition.
        Example:
        JavaScript

        const ages = [25, 30, 22];
        const allAdults = ages.every((age) => age >= 18);
        // allAdults: true
        AI-generated code. Review and use carefully. More info on FAQ.
        Summarize:
        Higher-order functions enhance code readability, maintainability, and flexibility.
        Understanding HOFs is crucial for writing efficient and elegant JavaScript.


